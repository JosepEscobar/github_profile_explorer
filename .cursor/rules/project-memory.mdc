---
description: 
globs: 
alwaysApply: false
---
ðŸ§ª Tarea TÃ©cnica Multiplataforma â€“ GitHub Profile Explorer
ðŸŽ¯ Objetivo
Desarrollar una aplicaciÃ³n nativa y multiplataforma (iOS, iPadOS, macOS y tvOS) que permita buscar un perfil de GitHub y visualizar sus datos bÃ¡sicos (nombre, foto) y sus repositorios con sus respectivos lenguajes de programaciÃ³n.

ðŸ“¦ Estructura del Proyecto
Organiza el proyecto en mÃ³dulos usando Swift Package Manager (SPM) con la siguiente arquitectura Clean MVVM Modular:


GitHubExplorer/
â”œâ”€â”€ Presentation/
â”‚   â”œâ”€â”€ iOS/
â”‚   â”œâ”€â”€ macOS/
â”‚   â”œâ”€â”€ tvOS/
â”‚   â””â”€â”€ iPadOS/
â”œâ”€â”€ Domain/
â”‚   â”œâ”€â”€ Entities/
â”‚   â”œâ”€â”€ UseCases/
â”‚   â””â”€â”€ Interfaces/
â”œâ”€â”€ Data/
â”‚   â”œâ”€â”€ API/
â”‚   â”œâ”€â”€ Repositories/
â”‚   â””â”€â”€ Mappers/
â”œâ”€â”€ Resources/
â”œâ”€â”€ SharedUI/
â”œâ”€â”€ Tests/
â””â”€â”€ App/
ðŸ”§ TecnologÃ­as
Swift 6 y Swift Concurrency (async/await)

SwiftUI con vistas especÃ­ficas por plataforma

Kingfisher para carga y cachÃ© de imÃ¡genes

Nimble + Quick para testing de lÃ³gica

SPM como gestor de dependencias

Sin uso de Combine

ðŸ§  Requisitos Funcionales
1. Pantalla de Inicio
Campo de texto para ingresar el nombre de usuario

BotÃ³n de bÃºsqueda

ValidaciÃ³n del input (no vacÃ­o, sin espacios)

2. Pantalla de Perfil
Nombre de usuario

Foto de perfil (usar Kingfisher)

Lista de repositorios:

Nombre del repositorio

Lenguaje principal

BotÃ³n para volver

3. Manejo de Errores
Alerta: "A network error has occurred. Check your Internet connection and try again later."

Alerta usuario no encontrado: "User not found. Please enter another name"

ðŸ“± Interfaces por Plataforma (creatividad + adaptaciÃ³n)
ðŸ“± iOS
UI vertical con NavigationStack

AdaptaciÃ³n a tamaÃ±o compacto (iPhone SE) y extendido (Pro Max)

ðŸ’» macOS
Pantalla dividida (Split View) con Sidebar

Uso de List con estilo de macOS

Atajos de teclado para bÃºsqueda (âŒ˜F)

ðŸ“º tvOS
NavegaciÃ³n con control remoto

BotÃ³n de bÃºsqueda grande y campo enfocado por defecto

UI con foco animado y repositorios navegables con el mando

ðŸ§¾ iPadOS
DiseÃ±o adaptable con NavigationSplitView

Soporte para multitarea (slide-over / split view)

DiseÃ±o responsive usando GeometryReader y adaptive stacks

ðŸ§± Arquitectura y Capas
ðŸ§© Domain
User y Repository como entidades

UserRepositoryProtocol con mÃ©todo fetchUserRepos(username:) async throws -> [Repository]

FetchUserReposUseCase

ðŸ”Œ Data
ImplementaciÃ³n concreta de UserRepositoryProtocol

Llamadas a https://api.github.com/users/{username}/repos

ConversiÃ³n JSON â†’ modelo de dominio

Manejo de errores HTTP 404 y otros

ðŸŽ¨ Presentation
Cada plataforma tendrÃ¡ su propia implementaciÃ³n:


protocol UserProfileViewModelProtocol: ObservableObject {
    var state: ViewState { get }
    func fetchUserRepos(for username: String)
}
ViewState: .idle, .loading, .loaded(User, [Repository]), .error(String)

UserProfileViewModel: capa intermedia entre vista y caso de uso

ðŸ§ª Tests
âœ… Unit Tests
FetchUserReposUseCaseTests con mocks

UserRepositoryTests para validar parsing, errores y resultados vacÃ­os

âœ… UI Snapshot (opcional, si puedes aÃ±adirlo)
Para vistas de cada plataforma (usando iOSSnapshotTestCase si decides incluirlo)

âœ… Nimble + Quick
Para ViewModel y UseCases

Ejemplo:


describe("UserProfileViewModel") {
    it("sets state to .error when user not found") {
        // ...
        expect(viewModel.state).toEventually(equal(.error("User not found...")))
    }
}
ðŸ§  Extra Challenge Creativo (Opcional)
ðŸŽ¨ Agrega soporte para modo oscuro y modo accesibilidad
ðŸ“ˆ Muestra un grÃ¡fico de barras con nÃºmero de repos por lenguaje (solo en macOS)
Agrega soporte multiidioma 

ðŸŽ¤ AÃ±ade bÃºsqueda por voz en tvOS
